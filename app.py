import gradio as gr
import numpy as np
from PIL import Image
import io
import tempfile
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT

# Simulaci√≥n del modelo de IA (reemplaza con tu modelo real)
def predict_retinopathy(image):
    """
    Funci√≥n que simula la predicci√≥n de retinopat√≠a diab√©tica.
    Reemplaza esta funci√≥n con tu modelo real de IA.
    """
    import random
    random.seed(hash(str(image.tobytes())) % 1000)
    
    probabilities = np.random.dirichlet([1, 1, 1, 1, 1])
    classes = [
        "Sin retinopat√≠a diab√©tica",
        "Retinopat√≠a diab√©tica leve (NPDR)",
        "Retinopat√≠a diab√©tica moderada (NPDR)",
        "Retinopat√≠a diab√©tica severa (NPDR)",
        "Retinopat√≠a diab√©tica proliferativa (PDR)"
    ]
    
    predicted_class = classes[np.argmax(probabilities)]
    confidence = np.max(probabilities) * 100
    recommendations = generate_recommendations(predicted_class, confidence)
    
    return {
        "prediction": predicted_class,
        "confidence": confidence,
        "probabilities": dict(zip(classes, probabilities)),
        "recommendations": recommendations,
        "severity": get_severity_level(predicted_class)
    }

def generate_recommendations(prediction, confidence):
    """Genera recomendaciones basadas en el diagn√≥stico"""
    recommendations = {
        "Sin retinopat√≠a diab√©tica": [
            "Mantener control estricto de la glucosa en sangre",
            "Continuar con revisiones oftalmol√≥gicas anuales",
            "Mantener una dieta saludable y ejercicio regular",
            "Controlar la presi√≥n arterial y colesterol"
        ],
        "Retinopat√≠a diab√©tica leve (NPDR)": [
            "Control m√°s frecuente de la glucosa en sangre",
            "Revisiones oftalmol√≥gicas cada 6 meses",
            "Considerar consulta con endocrin√≥logo",
            "Mantener presi√≥n arterial controlada"
        ],
        "Retinopat√≠a diab√©tica moderada (NPDR)": [
            "Consulta inmediata con oftalm√≥logo especialista",
            "Control estricto de glucosa y presi√≥n arterial",
            "Revisiones cada 3-4 meses",
            "Considerar tratamiento con l√°ser si es necesario"
        ],
        "Retinopat√≠a diab√©tica severa (NPDR)": [
            "Consulta urgente con oftalm√≥logo especialista",
            "Tratamiento con l√°ser recomendado",
            "Control muy estricto de glucosa y presi√≥n arterial",
            "Revisiones mensuales hasta estabilizaci√≥n"
        ],
        "Retinopat√≠a diab√©tica proliferativa (PDR)": [
            "Consulta inmediata y urgente con oftalm√≥logo",
            "Tratamiento con l√°ser o inyecciones intrav√≠treas",
            "Hospitalizaci√≥n si hay hemorragia v√≠trea",
            "Control extremadamente estricto de glucosa"
        ]
    }
    
    return recommendations.get(prediction, ["Consulta con especialista"])

def get_severity_level(prediction):
    """Obtiene el nivel de severidad (1-5)"""
    severity_map = {
        "Sin retinopat√≠a diab√©tica": 1,
        "Retinopat√≠a diab√©tica leve (NPDR)": 2,
        "Retinopat√≠a diab√©tica moderada (NPDR)": 3,
        "Retinopat√≠a diab√©tica severa (NPDR)": 4,
        "Retinopat√≠a diab√©tica proliferativa (PDR)": 5
    }
    return severity_map.get(prediction, 1)

def create_pdf_report(patient_data, image, diagnosis_result):
    """Crea un reporte PDF profesional"""
    
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
        pdf_path = tmp_file.name
    
    doc = SimpleDocTemplate(pdf_path, pagesize=A4)
    story = []
    
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2563eb')
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=20,
        textColor=colors.HexColor('#374151')
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=12
    )
    
    # Encabezado
    story.append(Paragraph("SightTech - Reporte de Diagn√≥stico", title_style))
    story.append(Paragraph("Detecci√≥n de Retinopat√≠a Diab√©tica", subtitle_style))
    story.append(Spacer(1, 20))
    
    # Informaci√≥n del paciente
    story.append(Paragraph("INFORMACI√ìN DEL PACIENTE", subtitle_style))
    patient_info = [
        ["Nombre:", patient_data.get('name', 'No especificado')],
        ["Edad:", f"{patient_data.get('age', 'No especificado')} a√±os"],
        ["G√©nero:", patient_data.get('gender', 'No especificado')],
        ["Fecha de an√°lisis:", datetime.now().strftime("%d/%m/%Y %H:%M")],
        ["Tiempo con diabetes:", f"{patient_data.get('diabetes_years', 'No especificado')} a√±os"],
        ["Nivel de glucosa:", f"{patient_data.get('glucose_level', 'No especificado')} mg/dL"],
        ["Presi√≥n arterial:", f"{patient_data.get('blood_pressure', 'No especificado')} mmHg"]
    ]
    
    patient_table = Table(patient_info, colWidths=[2*inch, 4*inch])
    patient_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f3f4f6')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#374151')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d1d5db'))
    ]))
    story.append(patient_table)
    story.append(Spacer(1, 20))
    
    # Resultados del diagn√≥stico
    story.append(Paragraph("RESULTADOS DEL DIAGN√ìSTICO", subtitle_style))
    
    diagnosis_text = f"""
    <b>Diagn√≥stico:</b> {diagnosis_result['prediction']}<br/>
    <b>Confianza del modelo:</b> {diagnosis_result['confidence']:.1f}%<br/>
    <b>Nivel de severidad:</b> {diagnosis_result['severity']}/5
    """
    story.append(Paragraph(diagnosis_text, normal_style))
    story.append(Spacer(1, 15))
    
    # Probabilidades
    story.append(Paragraph("Probabilidades por clase:", normal_style))
    for class_name, prob in diagnosis_result['probabilities'].items():
        prob_text = f"‚Ä¢ {class_name}: {prob*100:.1f}%"
        story.append(Paragraph(prob_text, normal_style))
    
    story.append(Spacer(1, 20))
    
    # Recomendaciones
    story.append(Paragraph("RECOMENDACIONES M√âDICAS", subtitle_style))
    for i, recommendation in enumerate(diagnosis_result['recommendations'], 1):
        rec_text = f"{i}. {recommendation}"
        story.append(Paragraph(rec_text, normal_style))
    
    story.append(Spacer(1, 20))
    
    # Imagen analizada
    if image is not None:
        story.append(Paragraph("IMAGEN ANALIZADA", subtitle_style))
        img_buffer = io.BytesIO()
        image.save(img_buffer, format='PNG')
        img_buffer.seek(0)
        
        pdf_img = RLImage(img_buffer, width=4*inch, height=3*inch)
        story.append(pdf_img)
        story.append(Spacer(1, 20))
    
    # Pie de p√°gina
    story.append(Paragraph("NOTA IMPORTANTE:", subtitle_style))
    disclaimer = """
    Este reporte es generado autom√°ticamente por un sistema de inteligencia artificial 
    y debe ser revisado por un profesional m√©dico calificado. Los resultados son 
    informativos y no constituyen un diagn√≥stico m√©dico definitivo.
    """
    story.append(Paragraph(disclaimer, normal_style))
    
    doc.build(story)
    return pdf_path

def process_diagnosis(image, patient_data):
    """Procesa el diagn√≥stico completo"""
    
    if image is None:
        return "Por favor, sube una imagen de fondo de ojo.", None, None
    
    # Realizar predicci√≥n
    diagnosis_result = predict_retinopathy(image)
    
    # Crear reporte PDF
    pdf_path = create_pdf_report(patient_data, image, diagnosis_result)
    
    # Preparar resultados para mostrar
    result_text = f"""
    ## üìã DIAGN√ìSTICO COMPLETO
    
    **Resultado:** {diagnosis_result['prediction']}
    **Confianza:** {diagnosis_result['confidence']:.1f}%
    **Severidad:** {diagnosis_result['severity']}/5
    
    ## üìä PROBABILIDADES
    """
    
    for class_name, prob in diagnosis_result['probabilities'].items():
        result_text += f"- {class_name}: {prob*100:.1f}%\n"
    
    result_text += "\n## üí° RECOMENDACIONES\n"
    for i, recommendation in enumerate(diagnosis_result['recommendations'], 1):
        result_text += f"{i}. {recommendation}\n"
    
    return result_text, pdf_path, diagnosis_result

# Interfaz de Gradio
def create_interface():
    with gr.Blocks(
        title="SightTech - Detecci√≥n de Retinopat√≠a Diab√©tica",
        theme=gr.themes.Soft(
            primary_hue="blue",
            secondary_hue="purple",
            neutral_hue="gray"
        ),
        css="""
        .gradio-container {
            max-width: 1200px !important;
            margin: 0 auto !important;
        }
        .header {
            text-align: center;
            padding: 20px;
            background: linear-gradient(135deg, #2563eb, #7c3aed);
            color: white;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        """
    ) as demo:
        
        # Header personalizado
        with gr.Row():
            gr.HTML("""
            <div class="header">
                <h1>üî¨ SightTech - Sistema de Detecci√≥n de Retinopat√≠a Diab√©tica</h1>
                <p>Inteligencia Artificial para el diagn√≥stico temprano con precisi√≥n superior al 95%</p>
            </div>
            """)
        
        with gr.Tabs():
            # Pesta√±a 1: Cuestionario del Paciente
            with gr.TabItem("üìù Informaci√≥n del Paciente"):
                with gr.Row():
                    with gr.Column(scale=1):
                        gr.Markdown("### Datos Personales")
                        name = gr.Textbox(label="Nombre completo", placeholder="Ej: Juan P√©rez")
                        age = gr.Number(label="Edad", minimum=1, maximum=120, value=45)
                        gender = gr.Radio(
                            choices=["Masculino", "Femenino", "Otro"],
                            label="G√©nero",
                            value="Masculino"
                        )
                        
                        gr.Markdown("### Informaci√≥n M√©dica")
                        diabetes_years = gr.Number(
                            label="A√±os con diabetes", 
                            minimum=0, 
                            maximum=50, 
                            value=5
                        )
                        glucose_level = gr.Number(
                            label="Nivel de glucosa (mg/dL)", 
                            minimum=50, 
                            maximum=500, 
                            value=140
                        )
                        blood_pressure = gr.Textbox(
                            label="Presi√≥n arterial (mmHg)", 
                            placeholder="Ej: 120/80"
                        )
                        
                        gr.Markdown("### S√≠ntomas")
                        symptoms = gr.CheckboxGroup(
                            choices=[
                                "Visi√≥n borrosa",
                                "Manchas flotantes",
                                "Dificultad para ver de noche",
                                "P√©rdida de visi√≥n central",
                                "Dolor en los ojos",
                                "Ninguno de los anteriores"
                            ],
                            label="¬øQu√© s√≠ntomas experimentas?",
                            value=["Ninguno de los anteriores"]
                        )
                    
                    with gr.Column(scale=1):
                        gr.Markdown("### Factores de Riesgo")
                        risk_factors = gr.CheckboxGroup(
                            choices=[
                                "Hipertensi√≥n arterial",
                                "Colesterol alto",
                                "Fumar",
                                "Obesidad",
                                "Historial familiar de retinopat√≠a",
                                "Embarazo (diabetes gestacional)",
                                "Ninguno de los anteriores"
                            ],
                            label="Factores de riesgo adicionales",
                            value=["Ninguno de los anteriores"]
                        )
                        
                        gr.Markdown("### Medicamentos")
                        medications = gr.CheckboxGroup(
                            choices=[
                                "Insulina",
                                "Metformina",
                                "Otros antidiab√©ticos orales",
                                "Medicamentos para la presi√≥n",
                                "Estatinas",
                                "Ninguno"
                            ],
                            label="Medicamentos que toma actualmente",
                            value=["Ninguno"]
                        )
                        
                        gr.Markdown("### √öltima Revisi√≥n")
                        last_eye_exam = gr.Radio(
                            choices=[
                                "Menos de 6 meses",
                                "6-12 meses",
                                "1-2 a√±os",
                                "M√°s de 2 a√±os",
                                "Nunca"
                            ],
                            label="¬øCu√°ndo fue su √∫ltima revisi√≥n oftalmol√≥gica?",
                            value="6-12 meses"
                        )
            
            # Pesta√±a 2: An√°lisis de Imagen
            with gr.TabItem("üî¨ An√°lisis de Imagen"):
                with gr.Row():
                    with gr.Column(scale=1):
                        gr.Markdown("### Subir Imagen de Fondo de Ojo")
                        image_input = gr.Image(
                            label="Imagen de retinograf√≠a",
                            type="pil",
                            height=400
                        )
                        
                        analyze_btn = gr.Button(
                            "üîç Analizar Imagen", 
                            variant="primary",
                            size="lg"
                        )
                    
                    with gr.Column(scale=1):
                        gr.Markdown("### Resultados del An√°lisis")
                        results_output = gr.Markdown(label="Diagn√≥stico")
                        
                        # Bot√≥n para descargar PDF
                        download_btn = gr.File(
                            label="üìÑ Descargar Reporte PDF",
                            visible=False
                        )
            
            # Pesta√±a 3: Historial
            with gr.TabItem("üìä Historial de Diagn√≥sticos"):
                gr.Markdown("### Historial de An√°lisis")
                gr.Markdown("""
                **Funcionalidad en desarrollo:**
                - Almacenamiento seguro de diagn√≥sticos
                - Comparaci√≥n de resultados a lo largo del tiempo
                - Gr√°ficos de progreso
                - Exportaci√≥n de historial completo
                """)
        
        # Funci√≥n para procesar el diagn√≥stico
        def process_complete_diagnosis(img, nm, ag, gnd, dy, gl, bp, symp, risk, med, last_exam):
            # Crear diccionario con datos del paciente
            patient_data = {
                'name': nm,
                'age': ag,
                'gender': gnd,
                'diabetes_years': dy,
                'glucose_level': gl,
                'blood_pressure': bp,
                'symptoms': symp,
                'risk_factors': risk,
                'medications': med,
                'last_eye_exam': last_exam
            }
            
            # Procesar diagn√≥stico
            result_text, pdf_path, diagnosis = process_diagnosis(img, patient_data)
            
            # Preparar archivo para descarga
            if pdf_path:
                return result_text, pdf_path
            else:
                return result_text, None
        
        # Conectar componentes
        analyze_btn.click(
            fn=process_complete_diagnosis,
            inputs=[
                image_input, name, age, gender, diabetes_years, 
                glucose_level, blood_pressure, symptoms, risk_factors, 
                medications, last_eye_exam
            ],
            outputs=[results_output, download_btn]
        )
        
        # Mostrar bot√≥n de descarga cuando hay resultados
        def show_download_btn(result_text):
            if "DIAGN√ìSTICO COMPLETO" in result_text:
                return gr.File(visible=True)
            return gr.File(visible=False)
        
        results_output.change(
            fn=show_download_btn,
            inputs=[results_output],
            outputs=[download_btn]
        )
    
    return demo

# Crear y lanzar la aplicaci√≥n
if __name__ == "__main__":
    demo = create_interface()
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        show_error=True
    ) 